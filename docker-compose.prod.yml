version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: course-enrollment-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Course Enrollment Service (Production with RDS)
  app:
    image: course-enrollment-app
    container_name: course-enrollment-app
    env_file:
      - .env
    environment:
      # Override Redis to use container
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0

      # Swagger Configuration
      SWAGGER_HOST: 13.236.2.172:8080
      
    ports:
      - "8080:8080"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

    volumes:
      - /opt/course-enrollment/logs:/app/logs
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Database connection test service
  db-test:
    image: postgres:14-alpine
    container_name: course-enrollment-db-test
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    command: >
      sh -c "
        echo 'Testing RDS connection...' &&
        pg_isready -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} &&
        echo 'RDS connection successful!' &&
        psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -c 'SELECT version();' &&
        echo 'Database query test successful!'
      "
    restart: "no"
    profiles:
      - test

volumes:
  redis_data:

networks:
  default:
    name: course-enrollment-prod
