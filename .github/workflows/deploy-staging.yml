name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  APP_NAME: course-enrollment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: course_enrollment_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: go mod download
      
      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: testpass
          DB_NAME: course_enrollment_test
          DB_SSLMODE: disable
        run: |
          go test -v -race -coverprofile=coverage.out ./...

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Build binary
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o bin/${{ env.APP_NAME }} cmd/server/main.go
          chmod +x bin/${{ env.APP_NAME }}
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.STAGING_EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to Staging EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }} "
            sudo mkdir -p /opt/${{ env.APP_NAME }}/bin
            sudo mkdir -p /opt/${{ env.APP_NAME }}/config
            sudo chown -R ${{ secrets.STAGING_EC2_USER }}:${{ secrets.STAGING_EC2_USER }} /opt/${{ env.APP_NAME }}
          "
          
          scp -i ~/.ssh/id_rsa bin/${{ env.APP_NAME }} ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }}:/opt/${{ env.APP_NAME }}/bin/
          scp -i ~/.ssh/id_rsa config/app.ini ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }}:/opt/${{ env.APP_NAME }}/config/
          scp -i ~/.ssh/id_rsa docker-compose.yml ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }}:/opt/${{ env.APP_NAME }}/
          scp -i ~/.ssh/id_rsa Dockerfile ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }}:/opt/${{ env.APP_NAME }}/
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }} "
            cat > /opt/${{ env.APP_NAME }}/.env << EOF
            DB_HOST=${{ secrets.STAGING_DB_HOST }}
            DB_USER=${{ secrets.STAGING_DB_USER }}
            DB_PASSWORD=${{ secrets.STAGING_DB_PASSWORD }}
            DB_NAME=${{ secrets.STAGING_DB_NAME }}
            DB_SSLMODE=require
            PORT=8080
            EOF
          "
      
      - name: Build and restart staging service
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }} "
            cd /opt/${{ env.APP_NAME }}
            
            docker-compose down || true
            docker build -t ${{ env.APP_NAME }}:staging .
            docker-compose up -d
            
            sleep 10
          "
      
      - name: Health check staging
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.STAGING_EC2_USER }}@${{ secrets.STAGING_EC2_HOST }} "
            if curl -f http://localhost:8080/health; then
              echo '✅ Staging deployment successful!'
            else
              echo '❌ Staging health check failed!'
              docker-compose logs
              exit 1
            fi
          "
      
      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests against staging..."
          # Add your integration test commands here
          # Example: newman run postman_collection.json --env-var baseUrl=https://staging.yourdomain.com
      
      - name: Notify staging deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#staging-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
