name: Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Security: Concurrency control to cancel old workflows
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Security: Least privilege permissions
permissions:
  contents: read
  actions: read
  security-events: write

env:
  GO_VERSION: '1.24'
  APP_NAME: course-enrollment

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: course_enrollment_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      
      - name: Install dependencies
        run: go mod download

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate swagger docs
        run: swag init -g cmd/server/main.go -o docs

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: testpass
          DB_NAME: course_enrollment_test
          DB_SSLMODE: disable
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: go mod download

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate swagger docs
        run: swag init -g cmd/server/main.go -o docs

      - name: Build binary
        run: |
          GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o bin/${{ env.APP_NAME }} cmd/server/main.go
          chmod +x bin/${{ env.APP_NAME }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-binary
          path: bin/${{ env.APP_NAME }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: app-binary
          path: bin/
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            sudo mkdir -p /opt/${{ env.APP_NAME }}/bin
            sudo mkdir -p /opt/${{ env.APP_NAME }}/config
            sudo chown -R ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /opt/${{ env.APP_NAME }}
          "
          
          scp -i ~/.ssh/id_rsa bin/${{ env.APP_NAME }} ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/${{ env.APP_NAME }}/bin/
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/${{ env.APP_NAME }}/docker-compose.yml
          scp -i ~/.ssh/id_rsa Dockerfile ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/${{ env.APP_NAME }}/

          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            # Create application directory if not exists
            sudo mkdir -p /opt/${{ env.APP_NAME }}
            sudo chown ec2-user:ec2-user /opt/${{ env.APP_NAME }}

            # Create environment file with all required secrets
            cat > /opt/${{ env.APP_NAME }}/.env << EOF
            # Server Configuration
            PORT=8080
            APP_ENV=production

            # Database Configuration
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_SSLMODE=${{ secrets.DB_SSLMODE }}

            # JWT Configuration
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Redis Configuration
            REDIS_HOST=redis
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REDIS_DB=${{ secrets.REDIS_DB }}

            # S3 Configuration
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            S3_REGION=${{ secrets.S3_REGION }}
            S3_BASE_URL=${{ secrets.S3_BASE_URL }}
            S3_COURSE_IMAGES_FOLDER=${{ secrets.S3_COURSE_IMAGES_FOLDER }}

            # AWS Configuration
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            EOF
          "
      
      - name: Build and restart service
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            cd /opt/${{ env.APP_NAME }}

            # Stop current services
            sudo systemctl stop ${{ env.APP_NAME }} || true
            docker-compose down || true

            # Clean up old images and containers to free space
            echo '🧹 Cleaning up old Docker resources...'
            docker container prune -f
            docker image prune -f
            docker volume prune -f
            docker network prune -f

            # Remove old app images specifically (keep only latest)
            docker images ${{ env.APP_NAME }} --format 'table {{.Repository}}\t{{.Tag}}\t{{.ID}}' | grep -v latest | awk '{print \$3}' | xargs -r docker rmi -f || true

            # Build new image
            echo '🔨 Building new image...'
            docker build -t ${{ env.APP_NAME }}:latest .

            # Start services
            echo '🚀 Starting services...'
            docker-compose up -d
            sudo systemctl start ${{ env.APP_NAME }}

            # Final cleanup of dangling images
            docker image prune -f

            echo '✅ Deployment completed with cleanup!'
            sleep 10
          "
      
      - name: Health check
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
            if curl -f http://localhost:8080/health; then
              echo '✅ Deployment successful!'
            else
              echo '❌ Health check failed!'
              docker-compose logs
              exit 1
            fi
          "
      
      - name: Deployment Summary
        if: always()
        run: |
          echo "🚀 Deployment completed!"
          echo "📍 Instance: ${{ secrets.EC2_HOST }}"
          echo "🌐 Health Check: http://${{ secrets.EC2_HOST }}:8080/health"
          echo "📚 Swagger UI: http://${{ secrets.EC2_HOST }}:8080/swagger/index.html"
          echo "✅ Status: ${{ job.status }}"
